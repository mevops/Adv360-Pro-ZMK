
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>


#define KEYS_LEFT 0 1 2 3 4 5 6 \
                  14 15 16 17 18 19 20 \
                  28 29 30 31 32 33 34 \
                  46 47 48 49 50 51 \
                  66 67 68 69 70

#define KEYS_RIGHT 7 8 9 10 11 12 13 \
                   21 22 23 24 25 26 27 \
                   39 40 41 42 43 44 45 \
                   60 61 62 63 64 65 \
                   77 78 79 80 81

#define THUMBS_LEFT 35 36 54 71 72 73

#define THUMBS_RIGHT 37 38 57 74 75 76

#define THUMBS THUMBS_LEFT THUMBS_RIGHT

#define _SCRNS &kp LG(LS(NUMBER_4))

&lt {
    quick-tap-ms = <300>;
    global-quick-tap;
};

/ {


  behaviors {
    #include "macros.dtsi"

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        #flavor = "tap-preferred";
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
    };

    hm_l: homerow_mods_left {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_LEFT";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_RIGHT THUMBS>;
    };

    hm_r: homerow_mods_right {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_RIGHT";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_LEFT THUMBS>;
    };
  };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
 &kp EQUAL      &kp N1      &kp N2    &kp N3       &kp N4           &kp N5                          &tog 1             &mo 3     &kp N6       &kp N7       &kp N8     &kp N9    &kp N0           &kp MINUS
   &kp TAB      &kp Q       &kp W     &kp F        &kp P            &kp B             &macro_emoji_picker  &kp LC(UP_ARROW)      &kp J        &kp L        &kp U      &kp Y  &kp SEMI            &kp BSLH
   &none        &kp A       &hm_l LALT R &hm_l LGUI S &hm_l LSHFT T    &kp G            &kp LG(LS(NUMBER_4))          &kp LGUI   &kp LALT                            &kp RCTRL  &kp RGUI  &kp LC(DOWN_ARROW)     &kp M  &hm_r RSHFT N &hm_r RGUI E &hm_r RALT I  &kp O    &kp SQT
 &kp LSHFT      &kp Z       &kp X     &kp C        &hm_l LCTRL D            &kp V            &none             &none   &kp HOME        &none        &none  &kp PG_UP     &none               &none     &kp K        &hm_r RCTRL H  &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
     &mo 2  &kp GRAVE  &caps_word  &kp LEFT    &kp RIGHT  &lt 2 BACKSPACE                           &kp ESC           &kp END  &kp PG_DN  &lt 5 ENTER  &lt 2 SPACE     &kp UP  &kp DOWN            &kp LBKT  &kp RBKT        &mo 2
            >;
        };

        layer_keypad {
            bindings = <
 &kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4    &kp N5             &trans      &mo 3     &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY   &kp MINUS
   &kp TAB      &kp Q     &kp W     &kp E      &kp R     &kp T              &none      &none      &kp Y   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS    &kp BSLH
   &kp ESC      &kp A     &kp S     &kp D      &kp F     &kp G              &none  &kp LCTRL   &kp LALT                                 &kp LGUI        &kp RCTRL       &none     &kp H  &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_PLUS    &kp SQT
 &kp LSHFT      &kp Z     &kp X     &kp C      &kp V     &kp B              &none      &none   &kp HOME       &none         &none      &kp PG_UP            &none       &none     &kp N  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_ENTER  &kp RSHFT
     &mo 2  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT  &kp BSPC            &kp DEL    &kp END  &kp PG_DN   &kp ENTER     &kp KP_N0         &kp UP         &kp DOWN  &kp KP_DOT  &kp RBKT      &mo 2
            >;
        };

        layer_fn {
            bindings = <
 &kp F1  &kp F2  &kp F3                &kp F4                 &kp F5  &kp F6            &tog 1   &mo 3  &kp F7     &kp F8     &kp F9        &kp F10  &kp F11  &kp F12
 &trans  &trans  &trans        &kp LEFT_BRACE        &kp RIGHT_BRACE  &trans             &none   &none  &trans  &kp GRAVE  &kp SLASH  &kp BACKSLASH   &trans   &trans
 &trans  &kp LT  &kp GT  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans             &none  &trans  &trans                               &trans   &trans    &none  &kp HASH  &kp COLON        &kp SEMI   &kp EQUAL  &trans  &trans
 &trans  &trans  &trans      &kp LEFT_BRACKET      &kp RIGHT_BRACKET  &trans             &none   &none  &trans      &none      &none         &trans    &none    &none    &trans  &kp MINUS  &kp UNDERSCORE  &kp DOLLAR  &trans  &trans
 &trans  &trans  &trans                &trans                 &trans  &trans            &trans  &trans  &trans     &trans     &trans         &trans   &trans   &trans    &trans     &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_SEL 4                             &none       &trans  &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                   &none
  &none         &none         &none         &none         &none            &none                       &bootloader  &bootloader         &none         &none            &none         &none         &none                   &none
  &none         &none         &none         &none         &none            &none            &rgb_ug RGB_MEFS_CMD 5   &bt BT_CLR         &none                                   &bt BT_CLR    &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5   &none   &none   &none   &none   &none   &none
  &none         &none         &none         &none         &none            &none                             &none        &none         &none         &none            &none         &none         &none                   &none   &none   &none   &none   &none   &none   &none
  &none         &none         &none    &bl BL_INC    &bl BL_DEC  &rgb_ug RGB_TOG                        &bl BL_TOG        &none         &none    &bl BL_TOG  &rgb_ug RGB_TOG    &bl BL_INC    &bl BL_DEC                   &none   &none   &none
            >;
        };

        layer_nav {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans    &trans     &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &kp HOME  &kp PG_UP  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans                       &trans  &trans  &trans  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans    &trans     &trans  &trans  &trans  &trans          &trans       &kp END       &kp PG_DN           &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans             &to 0  &trans  &trans    &trans     &trans  &trans  &trans  &trans          &trans        &trans
            >;
        };

        layer_mac {
            bindings = <
 &trans  &trans  &trans           &trans             &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans       &kp LC(UP)       &kp LC(DOWN)  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans           _SCRNS       &kp LG(BSLH)  &trans            &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &kp LA(LG(ESC))  &kp LC(LG(SPACE))  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans           &trans             &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

    };
};
